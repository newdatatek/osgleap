/*
* Library osgLeap
* Copyright (C) 2013 Johannes Scholz/vtxtech. All rights reserved.
*
* This file is licensed under the GNU Lesser General Public License 3 (LGPLv3),
* but distributed WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
*/

#ifndef OSGLEAP_INTERSECTIONUPDATECALLBACK_
#define OSGLEAP_INTERSECTIONUPDATECALLBACK_ 1

//-- Project --//
#include <osgLeap/Export>
#include <osgLeap/IntersectionController>

//-- OSG: osg --//
#include <osg/Camera>
#include <osg/Geode>
#include <osg/NodeCallback>

namespace osgLeap {

    class OSGLEAP_EXPORT IntersectionUpdateCallback: public osg::NodeCallback
    {
    public:
        typedef std::map<int, osg::ref_ptr<osg::PositionAttitudeTransform> > PatMap;
        typedef std::pair<int, osg::ref_ptr<osg::PositionAttitudeTransform> > PatPair;

        // Parameter-constructor with fixed screen resolution
        // Use setResolution to update during runtime
        IntersectionUpdateCallback(int screenwidth = 640, int screenheight = 480): intersectionController_(new osgLeap::IntersectionController(screenwidth, screenheight)),
            colorIndex_(0)
        {

        }

        // Parameter-constructor with auto-update to screen resolution
        IntersectionUpdateCallback(osg::Camera* camera): intersectionController_(new osgLeap::IntersectionController(camera)),
            colorIndex_(0)
        {

        }

        // Copy-constructor
        IntersectionUpdateCallback(const IntersectionUpdateCallback& nc, const osg::CopyOp& op): NodeCallback(nc, op),
            intersectionController_(new osgLeap::IntersectionController(*nc.intersectionController_)),
            colorIndex_(nc.colorIndex_)
        {

        }

        virtual void operator()(osg::Node* node, osg::NodeVisitor* nv);

        osgLeap::IntersectionController* getIntersectionController() { return intersectionController_; }

    private:
        osg::ref_ptr<osgLeap::IntersectionController> intersectionController_;
        int colorIndex_;

        osg::Vec4 getColor();

        // To alter the geometry of a pointer, subclass
        // IntersectionUpdateCallback overriding createPointerGeode
        virtual osg::ref_ptr<osg::Node> createPointerGeode();
    };

} // namespace osgLeap

#endif // OSGLEAP_INTERSECTIONUPDATECALLBACK_
