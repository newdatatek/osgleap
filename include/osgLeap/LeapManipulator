/*
 * Library osgLeap
 * Copyright (C) 2013 Johannes Scholz/vtxtech. All rights reserved.
 *
 * This file is licensed under the GNU Lesser General Public License 3 (LGPLv3),
 * but distributed WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef OSGLEAP_LEAPMANIPULATOR_
#define OSGLEAP_LEAPMANIPULATOR_ 1

//-- Project --//
#include <osgLeap/Export>

//-- Leap --//
#include <Leap.h>

//-- OSG: osgGA --//
#include <osgGA/OrbitManipulator>

namespace osgLeap {

	// A CameraManipulator for interacting with the Leap Motion device
	class OSGLEAP_EXPORT LeapManipulator: public osgGA::OrbitManipulator, public Leap::Listener
	{
		typedef osgGA::OrbitManipulator inherited;
		public:
			enum Mode {
				// TwoHanded is currently default.
				// PAN: Single hand - hand opened (fingers spread a bit)
				// ZOOM: Two hands - left hand closed (fist), right hand opened (fingers spread a bit)
				// ROTATE: Two hands - both hands opened. To stop rotating fully close both hands.
				TwoHanded = 1,
				// SingleHanded is the most simple manipulator mode
				// Use one hand for rotating and zooming. Panning is not supported.
				SingleHanded = 2
			};

			enum Action {
				LM_None = 0,
				LM_Pan = 1,
				LM_Rotate = 2,
				LM_Zoom = 4
			};

			// Default constructor
			LeapManipulator(const Mode& mode = TwoHanded);

			// Copy constructor
			LeapManipulator(const LeapManipulator& lm,
						const osg::CopyOp& copyOp = osg::CopyOp::SHALLOW_COPY);

			// Virtual destructor
			virtual ~LeapManipulator();

			META_Object( osgLeap, LeapManipulator );

			void setMode(const Mode& mode) { mode_ = mode; }

			// Called from within OpenSceneGraph EventTraversal
			virtual bool handle( const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& us );

			// Called by Leap::Controller asynchronously
			virtual void onFrame(const Leap::Controller&);

		protected:
			Leap::Frame frame_;
			osg::Timer_t frameStamp_;
			Leap::Frame lastFrame_;
			osg::Timer_t lastFrameStamp_;

			int32_t leftHandID_;
			int32_t rightHandID_;
			Leap::Vector lastPositionLeftHand_;
			Leap::Vector lastPositionRightHand_;
			double handsDistance_;

			int currentAction_;
			Mode mode_;
	};

} /* namespace osgLeap */

#endif /* OSGLEAP_LEAPMANIPULATOR_ */
